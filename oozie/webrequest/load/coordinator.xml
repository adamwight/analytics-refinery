<?xml version="1.0" encoding="UTF-8"?>
<coordinator-app xmlns="uri:oozie:coordinator:0.4"
    xmlns:sla="uri:oozie:sla:0.2"
    name="load_webrequest-${webrequest_source}-coord"
    frequency="${coord:hours(1)}"
    start="${start_time}"
    end="${stop_time}"
    timezone="Universal">

    <parameters>

        <!-- Required properties -->
        <property><name>queue_name</name></property>
        <property><name>name_node</name></property>
        <property><name>job_tracker</name></property>
        <property><name>workflow_file</name></property>
        <property><name>start_time</name></property>
        <property><name>stop_time</name></property>
        <property><name>datasets_raw_file</name></property>
        <property><name>webrequest_raw_data_directory</name></property>

        <property><name>hive_site_xml</name></property>
        <property><name>add_partition_workflow_file</name></property>
        <property><name>table</name></property>
        <property><name>statistics_table</name></property>
        <property><name>webrequest_source</name></property>
        <property><name>faulty_hosts_directory</name></property>
        <property><name>mark_directory_done_workflow_file</name></property>
        <property><name>send_error_email_workflow_file</name></property>
        <property><name>sla_alert_contact</name></property>
    </parameters>

    <controls>
        <!--
        If everything goes smoothly, we need a timeout of at least 1
        hour, due to the waiting on a subsequent dataset. Hence, the
        cluster's default timeout of 2 hours (our cluster does not use
        the Oozie default) gets in the way as soon as there are minor
        transient hiccups. Hence, we use a slightly higher timeout on
        purpose. This timeout helps us to bridge smaller transient
        issues automatically.

        (timeout is measured in minutes)
        -->
        <timeout>300</timeout>

        <!--
        Computing sequence stats is not too cheap, so we limit
        concurrency.

        Note, that this is per coordinator. So if we run this
        coordinator for say 4 webrequest_sources (see bundle.xml :-)),
        we effectively compute sequence statistics for up to 8
        datasets in parallel.

        Also note, that back-filling is not limited by the
        coordinator's frequency, so back-filling works nicely
        even-though the concurrency is low.
        -->
        <concurrency>2</concurrency>


        <!--
        Since we expect only one incarnation per hourly dataset, the
        default throttle of 12 is way to high, and there is not need
        to keep that many materialized jobs around.

        By resorting to 2, we keep the hdfs checks on the datasets
        low, while still being able to easily feed the concurrency.
        -->
        <throttle>2</throttle>
    </controls>

    <datasets>
        <!--
        Include the given $datasets_raw_file file.  This should
        define the "webrequest_*_raw" datasets for this coordinator.
        -->
        <include>${datasets_raw_file}</include>
    </datasets>

    <input-events>
        <data-in name="input" dataset="webrequest_${webrequest_source}_raw_unchecked">
            <instance>${coord:current(0)}</instance>
        </data-in>
    </input-events>

    <action>
        <workflow>
            <app-path>${workflow_file}</app-path>
            <configuration>
                <property>
                    <name>year</name>
                    <value>${coord:formatTime(coord:nominalTime(), "y")}</value>
                </property>
                <property>
                    <name>month</name>
                    <value>${coord:formatTime(coord:nominalTime(), "M")}</value>
                </property>
                <property>
                    <name>day</name>
                    <value>${coord:formatTime(coord:nominalTime(), "d")}</value>
                </property>
                <property>
                    <name>hour</name>
                    <value>${coord:formatTime(coord:nominalTime(), "H")}</value>
                </property>
                <property>
                    <name>location</name>
                    <value>${coord:dataIn('input')}</value>
                </property>
            </configuration>
        </workflow>
        <sla:info>
            <!--
                Use action actual time as SLA base, since it's the time used
                to compute timeout
            -->
            <sla:nominal-time>${coord:actualTime()}</sla:nominal-time>
            <sla:should-end>${3 * HOURS}</sla:should-end>
            <sla:alert-events>end_miss</sla:alert-events>
            <sla:alert-contact>${sla_alert_contact}</sla:alert-contact>
        </sla:info>
    </action>
</coordinator-app>
